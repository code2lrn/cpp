//
// Created by Ranga on 2/22/17.
//

#include <vector>
#include <cmath>
#include <iostream>
#include <algorithm>

int MajorityElement( std::vector< int > &v ) {
    int majorityElemIndex = 0, runsize = 1;
    for( int i = 1; i < v.size(); ++i ) {
        if( v[ majorityElemIndex ] == v[ i ] ) {
            ++runsize;
        }
        else {
            --runsize;
        }

        if( runsize == 0 ) {
            majorityElemIndex = i;
            runsize = 1;
        }
    }

    return v[ majorityElemIndex ];
}

int main( int argc, char *argv[] ) {

    std::vector< int > v{ 240342,644639,644798,832690,788113,116110,644798,978903,644798,582041,644798,683027,685760,496950,644798,644798,439763,138833,215650,913115,343182,644798,29565,644798,30374,644798,200089,644798,654993,644798,381630,417436,644798,644798,644798,403118,900672,644798,1186,58988,34858,41334,275797,644798,766712,644798,780267,644798,644798,319096,644798,644798,165704,906245,644798,644798,581855,644798,644798,503110,644798,644798,426628,644798,644798,644798,828810,644798,644798,644798,943450,644798,644798,644798,644798,351718,644798,810212,644798,644798,644798,644798,644798,582413,20043,462351,475672,644798,528209,343585,644798,644798,81377,644798,644798,865746,588120,566595,644798,300544,644798,644798,116276,416549,644798,415067,644798,644798,644798,644798,24311,789261,79087,644798,247192,862811,644798,667632,644798,644798,841502,644798,175145,644798,232858,644798,831983,644798,871450,814676,644798,957445,158185,644798,644798,700924,644798,540727,587448,644798,644798,644798,852842,644798,988266,288662,644798,644798,985462,55575,644798,644798,644798,644798,644798,644798,644798,644798,810736,644798,506192,644798,169483,644798,68270,742460,330168,644798,644798,644798,309402,394377,281136,407944,644798,644798,644798,644798,287942,40342,920687,227219,575431,435705,644798,421809,644798,644798,644798,644798,975173,644798,644798,797772,644798,644798,38887,456746,436932,644798,109973,644798,270296,644798,896886,584095,644798,644798,37781,644798,644798,644798,437963,224442,366894,644798,644798,644798,456362,615151,644798,644798,65210,644798,644798,644798,644798,644798,644798,644798,936813,644798,424110,751209,188836,644798,644798,590061,887623,239920,92477,644798,644798,644798,370674,792482,399141,514197,644798,826822,644798,319959,644798,118720,73484,611362,32715,644798,939260,644798,644798,644798,644798,644798,644798,978924,686563,801366,644798,17989,644798,644798,644798,644798,644798,690122,644798,644798,360677,237670,493191,644798,644798,474961,136097,145132,797289,632346,644798,644798,224379,644798,542828,890075,374974,644798,644798,593491,644798,644798,644798,169911,55045,711211,990057,644798,356926,644798,644798,644798,915261,644798,644798,152307,644798,781968,644798,128598,644798,995251,644798,288999,644798,401139,185063,644798,644798,383595,644798,698142,319998,644798,525290,644798,644798,258058,644798,738741,644798,644798,210755,644798,25764,99935,644798,644798,313713,644798,536500,150064,644798,330290,898523,644798,720650,584172,241042,273675,644798,844490,644798,8653,732626,680160,644798,932703,644798,976427,896088,186807,845703,537289,83648,518369,689597,644798,68307,644798,636104,644798,152019,21793,644798,644798,644798,644798,644798,347185,644798,644798,1888,644798,218921,644798,644798,115386,382057,28379,424513,644798,304149,644798,644798,644798,110832,277226,644798,644798,370642,644798,644798,48932,644798,644798,644798,644798,282817,468061,644798,644798,644798,277195,673892,419789,644798,910746,644798,27750,644798,820017,775372,691921,644798,644798,644798,427169,403153,644798,339508,386734,190699,346764,644798,644798,644798,644798,327544,430729,924852,644798,644798,644798,644798,339885,434454,644798,6296,644798,644798,66290 };

/*
    std::sort( v.begin(), v.end() );
    std::cout << v[ floor( v.size() / 2 ) ] << std::endl; // 644798
*/

    std::cout << MajorityElement( v ) << std::endl;
    return 0;
}
